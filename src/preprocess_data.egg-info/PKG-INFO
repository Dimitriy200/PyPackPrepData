Metadata-Version: 2.1
Name: preprocess-data
Version: 0.1.10
Summary: package for preprocessing data
Author: DZ
Project-URL: Homepage, https://github.com/Dimitriy200/prepData
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.10.0
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: setuptools>=40.8.0
Requires-Dist: numpy
Requires-Dist: scikit-learn

## Дом проекта
<a href = "https://test.pypi.org/project/preprocess-data/0.0.8/">PyPi</a>

## класс PrepData


 - `start_prepData()` - Основной метод предобработки данных - запускает ряд внутренних методов в комплексе. Возвращаемое значение - `void`
    Параметры:
    - `path_raw: str` - Путь до сырых данных с расширением ".json".
    - `path_processed: str` - Путь до промежуточных данных. Файлы сохраняются в формате csv.
    - `path_final: str` - Путь до финальных данных. Финальные данные разделены на Нормальные и аномальные данные, которые в свою очередь, разделены на обучающую и валидационную выборки.
    

 - `employ_Pipline()` - Стандартизарует и нормализирует данные, а так же удаляет пропущенные значения в датасете. Возвращаемое значение - `np.array` массив.
    Параметры:
    - `dataset_np: np.array` - Набор данных, который необходимо нормализовать.


 - `different_anomaly()` - Разделяет данные на "нормальную" и "аномальную" выборки. Возвращаемое значение - `dict` с указанием путей к сохраненным файлом.
    Параметры:
    - `dataFrame: np.array` - Набор данных, который необходимо разделить.
    - `out_path: str` - Путь, куда сохранить выходные наборы данных. Рекомендуется указывать `path_processed`.
    - `last_procent: float` - Указывает, какой процент последних значений для двигателя считать "аномальными". Принимает значения от 0 до 1.


 - `different_train_and_valid()` - Аналогично `different_anomaly()`, но разделяет подготовленные данные на обучающую и валидационную выборки. Возвращаемое значение - `str` путь до сохраненных файлов.
    Параметры:
    - `inp_path: str` - Путь, с предобработанными данными, сохрани. Рекомендуется указывать `path_processed`.
    - `out_path: str` - Путь, куда сохранить выходные наборы данных. Рекомендуется указывать `path_final`.
    - `procent_train: float` - Указывает, какой процент значений для двигателя считать валидационными. Принимает значения от 0 до 1.


 - `jsons_to_csv()` - Соединяет разрозненные json файлы в единый датасет формата `list`. Возвращаемое значение - `list` массив даннных.
    Параметры:
    - `inp_json_dir: str` - Путь до директории с папками, содержащими json файлы.


 - `save_Pipeline()` - Сохраннение пользовательского Pipeline. Возвращаемое значение - `void`.
    Параметры:
    - `saved_pipeline: PipPipeline` - `Pipline`, который требуется сериализовать.
    - `save_path: str` - Путь, куда сохранить выбранный Pipline.


 - `load_Pipeline()` - Загрузка `Pipline` из файла. Возвращаемое значение - `Pipline`.
    Параметры:
    - `load_path: str` - Путь до директории с сериализованными `Pipline`.


 - `fit_pipeline()` - Обучение пользовательского `Pipline` на наборе данных. Возвращаемое значение - `Pipline`.
    Параметры:
    - `pipeline: Pipeline` - Обучаемый Pipeline.
    - `fit_data: np.array` - Данные для обучения.
